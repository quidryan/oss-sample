apply plugin: 'release'

[
    uploadIvyLocal: 'uploadLocal', 
    uploadArtifactory: 'artifactoryPublish', // Call out to compile against internal repository
    buildWithArtifactory: 'build' // Build against internal repository
].each { key, value ->
    // Call out to compile against internal repository
    task "${key}"(type: GradleBuild) {
        startParameter = project.gradle.startParameter.newInstance()
        startParameter.addInitScript( file('gradle/netflix-oss.gradle') )
        startParameter.getExcludedTaskNames().add('check')
        tasks = [ 'build', value ]
    }
}

// Marker task for following code to key in on
task releaseCandidate(dependsOn: release)

// Build could do all sorts of things to the status, so adding logic to run after build
preTagCommit << {
    project.status = gradle.taskGraph.hasTask(releaseCandidate)?'candidate':'release'
}

// Ensure our versions look like the project status before publishing
task verifyStatus << {
    def hasSnapshot = version.contains('-SNAPSHOT')
    if (project.status == 'snapshot' && !hasSnapshot) {
        throw new GradleException("Version (${version}) needs -SNAPSHOT if publishing snapshot")
    }
}
uploadArtifactory.dependsOn(verifyStatus)
uploadMavenCentral.dependsOn(verifyStatus)

// Ensure upload happens before taggging but after all pre-checks
createReleaseTag.dependsOn([uploadArtifactory, uploadMavenCentral])

gradle.taskGraph.whenReady { taskGraph ->
    def hasRelease = taskGraph.hasTask('release')
    def indexOf = { return taskGraph.allTasks.indexOf(it) }

    if (hasRelease) {
        assert indexOf(build) < indexOf(unSnapshotVersion), 'build target has to be after unSnapshotVersion'
        assert indexOf(uploadMavenCentral) < indexOf(preTagCommit), 'preTagCommit has to be after uploadMavenCentral'
        assert indexOf(uploadArtifactory) < indexOf(preTagCommit), 'preTagCommit has to be after uploadArtifactory'
    }
}

// Prevent plugin from asking for a version number interactively
ext.'gradle.release.useAutomaticVersion' = "true"

release {
    failOnCommitNeeded=false
    failOnPublishNeeded=false
    failOnSnapshotDependencies=true
    failOnUnversionedFiles=false
    failOnUpdateNeeded=false
    includeProjectNameInTag=true
    requireBranch = null
}
