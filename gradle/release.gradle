apply plugin: 'release'

// Ignore release plugin's task because it calls out via GradleBuild. This is a good place to put an email to send out
task release(overwrite: true, dependsOn: commitNewVersion) << {
    // This is a good place to put an email to send out
}

task forceStatusToCandidate(dependsOn: unSnapshotVersion) {
    onlyIf { gradle.taskGraph.hasTask('releaseCandidate') }
    doFirst {
        project.status = 'candidate'
    }
}
preTagCommit.dependsOn forceStatusToCandidate

task releaseCandidate(dependsOn: [forceStatusToCandidate,release])

unSnapshotVersion << {
    status = version.contains('-SNAPSHOT')?:'snapshot'
}

[
    uploadIvyLocal: 'uploadLocal', 
    uploadArtifactory: 'artifactoryPublish', // Call out to compile against internal repository
    buildWithArtifactory: 'build' // Build against internal repository
].each { key, value ->
    // Call out to compile against internal repository
    task "${key}"(type: GradleBuild) {
        startParameter = project.gradle.startParameter.newInstance()
        startParameter.addInitScript( file('gradle/netflix-oss.gradle') )
        startParameter.getExcludedTaskNames().add('check')
        tasks = [ 'build', value ]
    }
}
task releaseArtifactory(dependsOn: [preTagCommit, uploadArtifactory])

preTagCommit.dependsOn build
preTagCommit.dependsOn buildWithArtifactory

// Ensure upload happens before taggging but after all pre-checks
createReleaseTag.dependsOn releaseArtifactory

uploadMavenCentral.dependsOn preTagCommit
createReleaseTag.dependsOn uploadMavenCentral

def releaseTasks = [initScmPlugin, checkCommitNeeded, checkUpdateNeeded, unSnapshotVersion, confirmReleaseVersion, checkSnapshotDependencies,
         preTagCommit, createReleaseTag, updateVersion, commitNewVersion]
println "PRESTATUS: ${project.status}"
releaseTasks.each { releaseTask -> releaseTask << {
    println "STATUS ${releaseTask.name}: ${project.status}"
}}
releaseTasks.inject(null) { acc, val -> 
    if (acc!=null) {
        val.dependsOn(acc)
    }
    val
}

// Prevent plugin from asking for a version number interactively
ext.'gradle.release.useAutomaticVersion' = "true"

release {
    failOnCommitNeeded=true
    failOnPublishNeeded=true
    failOnSnapshotDependencies=true
    failOnUnversionedFiles=true
    failOnUpdateNeeded=true
    includeProjectNameInTag=true
    revertOnFail=true
    requireBranch = null
}
