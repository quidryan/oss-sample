apply plugin: 'release'

// Ignore release plugin's task because it calls out via GradleBuild. This is a good place to put an email to send out
//task release(overwrite: true, dependsOn: commitNewVersion) << {
    // This is a good place to put an email to send out
//}

/*
task forceStatusToCandidate(dependsOn: unSnapshotVersion) {
    onlyIf { 
        gradle.taskGraph.allTasks.each { println "TASKS: ${it.name}" }
        return gradle.taskGraph.hasTask('releaseCandidate')
        }
    doFirst {
        project.status = 'candidate'
    }
}
preTagCommit.dependsOn forceStatusToCandidate

task releaseCandidate(dependsOn: [forceStatusToCandidate,release])
*/

//unSnapshotVersion << {
//    project.status = version.contains('-SNAPSHOT')?:'snapshot'
//}

[
    uploadIvyLocal: 'uploadLocal', 
    uploadArtifactory: 'artifactoryPublish', // Call out to compile against internal repository
    buildWithArtifactory: 'build' // Build against internal repository
].each { key, value ->
    // Call out to compile against internal repository
    task "${key}"(type: GradleBuild) {
        startParameter = project.gradle.startParameter.newInstance()
        startParameter.addInitScript( file('gradle/netflix-oss.gradle') )
        startParameter.getExcludedTaskNames().add('check')
        tasks = [ 'build', value ]
    }
}

task releaseArtifactory(dependsOn: [preTagCommit, uploadArtifactory])

// TODO Fix ordering so that build is after preTagCommit, since we want the release to capture the SHA1 that it can be built at

confirmReleaseVersion << {
    if (project.status != 'release') {
        throw new GradleException('Project has to be release status when releasing')
    }
}

// Ensure upload happens before taggging but after all pre-checks
createReleaseTag.dependsOn uploadArtifactory
createReleaseTag.dependsOn uploadMavenCentral

gradle.taskGraph.whenReady { taskGraph ->
    def hasRelease = taskGraph.hasTask('release')
    def indexOf = { return taskGraph.allTasks.indexOf(it) }

    if (hasRelease && indexOf(build) > indexOf(unSnapshotVersion) ) {
        throw new GradleException('build target has to be after unSnapshotVersion')
    }

    if (hasRelease && indexOf(uploadMavenCentral) > indexOf(preTagCommit) ) {
        throw new GradleException('build target has to be after unSnapshotVersion')
    }
}


// Prevent plugin from asking for a version number interactively
ext.'gradle.release.useAutomaticVersion' = "true"

release {
    failOnCommitNeeded=false
    failOnPublishNeeded=false
    failOnSnapshotDependencies=true
    failOnUnversionedFiles=false
    failOnUpdateNeeded=false
    includeProjectNameInTag=true
    revertOnFail=true
    requireBranch = null
}

gradle.taskGraph.afterTask { task ->
    println "STATUS: ${project.status} at ${task.name}"
}
