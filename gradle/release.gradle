apply plugin: 'release'

// Ignore release plugin's task because it calls out via GradleBuild. This is a good place to put an email to send out
task release(overwrite: true, dependsOn: commitNewVersion) << {
    // This is a good place to put an email to send out
}

[
    uploadIvyLocal: 'uploadLocal', 
    uploadArtifactory: 'artifactoryPublish', // Call out to compile against internal repository
    buildWithArtifactory: 'build' // Build against internal repository
].each { key, value ->
    // Call out to compile against internal repository
    task "${key}"(type: GradleBuild) {
        startParameter = project.gradle.startParameter.newInstance()
        startParameter.addInitScript( file('gradle/netflix-oss.gradle') )
        startParameter.getExcludedTaskNames().add('check')
        tasks = [ 'build', value ]
    }
}
task releaseArtifactory(dependsOn: [preTagCommit, uploadArtifactory])

commitNewVersion.dependsOn updateVersion
updateVersion.dependsOn createReleaseTag
createReleaseTag.dependsOn preTagCommit
preTagCommit.dependsOn build
preTagCommit.dependsOn buildWithArtifactory
preTagCommit.dependsOn checkSnapshotDependencies
checkSnapshotDependencies.dependsOn confirmReleaseVersion
confirmReleaseVersion.dependsOn unSnapshotVersion
unSnapshotVersion.dependsOn checkUpdateNeeded
checkUpdateNeeded.dependsOn checkCommitNeeded
checkCommitNeeded.dependsOn initScmPlugin

// Ensure upload happens before taggging but after all pre-checks
createReleaseTag.dependsOn releaseArtifactory

uploadMavenCentral.dependsOn preTagCommit
createReleaseTag.dependsOn uploadMavenCentral
    gradle.taskGraph.whenReady { taskGraph ->
        if ( rootProject.status == 'snapshot' && taskGraph.hasTask(':release') ) {
            throw new GradleException('"release" task can not be used for a snapshot')
        }
        def mcStatuses = ['release', 'snapshot']
        if ( !mcStatuses.contains(rootProject.status) && taskGraph.hasTask(':uploadMavenCentral') ) {
            throw new GradleException('Maven only supports "release" or "snapshot" as statuses')
        }
    }

// Prevent plugin from asking for a version number interactively
ext.'gradle.release.useAutomaticVersion' = "true"

release {
    failOnCommitNeeded=true
    failOnPublishNeeded=true
    failOnSnapshotDependencies=true
    failOnUnversionedFiles=true
    failOnUpdateNeeded=true
    includeProjectNameInTag=true
    revertOnFail=true
    requireBranch = null
}
